#pragma once

#include <vector>
#include "staff.h"

using namespace System;

public class DuplicatesFinder
{

public:
	static std::string findDuplicates(std::stringstream& wholeCsv) {		
		Console::WriteLine("findDuplicates");

		//parses the whole csv stringstream
		std::vector<Staff> staffVector;
		int staffCount = 0;
		while (!wholeCsv.eof()) {				
			if(staffCount > 0) {
				staffVector.push_back(getStaffFromLine(wholeCsv, staffCount));

				if (staffCount % 1000 == 0) {
					Console::WriteLine("Progress: staff count: {0}", staffCount);					
				}
			}
			else {
				//skips header
				getStaffFromLine(wholeCsv, staffCount);
			}
			staffCount++;			
		}

		//finds the duplicates
		for (std::vector<Staff>::iterator i = staffVector.begin(); i != staffVector.end(); ++i) {
			Console::WriteLine("Progress: staff i: {0}", i->id);
			for (std::vector<Staff>::iterator j = i+1; j != staffVector.end(); ++j) {
				if (Staff::Compare(*i, *j))
				{
					Console::WriteLine("identical:");
					String ^systemstring = gcnew String(i->print().c_str());
					Console::WriteLine("{0}", systemstring);
					delete systemstring;
				}
			}
		}
		
		return "";
	}


private:
	//hardcoded values as per the csv generated by the TransferTool app
	static constexpr int firstNameIndex = 0;
	static constexpr int lastNameIndex = 1;
	static constexpr int commonNameIndex = 2;
	static constexpr int dobIndex = 3;
	static constexpr int clubIndex = 9;

	//private constructor to preventing instantiation of this class
	DuplicatesFinder() {}

	static Staff getStaffFromLine(std::stringstream& wholeCsv, int staffCount)
	{		
		std::string line;		
		std::getline(wholeCsv, line);

		if (staffCount == 0) {
			//ignores header
			Staff staff;
			return staff;
		}

		std::string fn, ln, cn, dob, club;
		
		std::istringstream lineStream(line);				
		
		int index = 0;
		std::string cell;
		while (std::getline(lineStream, cell, ';') && index <= clubIndex)
		{
			if (index == firstNameIndex) {
				fn = cell;
			}
			else if (index == lastNameIndex) {
				ln = cell;
			}
			else if (index == commonNameIndex) {
				cn = cell;
			}
			else if (index == dobIndex) {
				dob = cell;
			}
			else if (index == clubIndex) {
				club = cell;
			}			
			index++;
		}
		/*// checks for a trailing comma with no data after it
		if (!lineStream && cell.empty())
		{
			// if there was a trailing comma then adds an empty element
			staff.push_back("");
		}*/		
		return Staff(staffCount, fn, ln, cn, dob, club);
	}
};
